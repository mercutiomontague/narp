#!/usr/bin/env ruby
#
require 'narp.rb'
require 'json'

def parse_options
  options = OpenStruct.new
  opt_parser = OptionParser.new do |opts|
    opts.banner = "Usage: narp.rb [options] narp_program_definition"
    mess =  "\nIf the program definition is provided on the command line: \n"
		mess += "1) it must be enclosed in double quotes.\n"
		mess += "2) double quotes and $ within the program definition must be escaped.\n\n"
		mess += "Option:\n"

		opts.separator mess

    opts.on('--file PROGRAM_FILE', 'Read the Narp program definition from PROGRAM_FILE') do |q|
      options.program_file = q
    end

    opts.on('--step-names', 'Return a list of the step-names') do 
      options.step_names_only = true
    end

    opts.on('--input-mappings', 'Return a json array mapping input files to their s3 destination') do
      options.input_mapping = true
    end

    opts.on('--output-mappings', 'Return a json array mapping output files to their s3 destination') do
      options.output_mapping = true
    end

    opts.on('--tasks', 'Return a json hash of the shell and hive steps to implement the narp program') do
      options.tasks = true
    end

    opts.on('--sys [ath|hive]', 'Specify the query engine') do |q|
      raise ArgumentError.new("Please specify either only 'ath' or 'hive' for the query engine.") unless ['ath', 'hive'].detect{|d| d == q.downcase}
      options.sys = q.downcase.intern
    end

  end

  opt_parser.parse!(ARGV)
  options
end

def read_program_file(opt)
  return nil unless opt.program_file
  File.open(opt.program_file, 'r').readlines.join("\n")
end

def process(opts)
  myapp.init( sys: opts.sys )
  myapp.parse( read_program_file(opts) || ARGV.join(' ') )

  h = {} 
  if opts.step_names_only
    h[:steps] = myapp.processing_steps.keys
  elsif opts.input_mapping
    h[:mappings] = myapp.infiles.s3_mappings
  elsif opts.output_mapping
    h[:mappings] = myapp.outfiles.s3_mappings
  elsif opts.tasks
    h[:tasks] = myapp.processing_steps
  end
  h

  rescue Exception => ex
    {status: 'failed',
     message: ex.message, 
     backtrace: ex.backtrace.flatten.join("\n")
    }
end

opts = parse_options

result = process(opts)
result[:status] = 'success' unless result.has_key?(:status)

puts ::JSON.pretty_generate( result )
