require 'narp/condition_extensions.rb'
require 'narp/basic_g.treetop'

module Narp
  grammar ConditionG
    include BasicG
    
    rule condition
      ('/condition'i identifier expression <Condition> ) 
    end
  
    rule logical_operator
      (space? 'and'i space? <LogicalOperator>) / (space? 'or'i space? <LogicalOperator>)
    end

    rule expression 
      (left_paren expression right_paren expression* <Expression>) /
      # ( sub_expression* (match_operator / character_operator / arithmetic_operator / numeric_operator / logical_operator) expression+ <Expression>) /
      ( sub_expression* (arithmetic_operator / numeric_operator / logical_operator) expression+ <Expression>) /
      ( sub_expression+  <Expression>) 
    end

    rule sub_expression
      character_expression / numeric_terminal
    end


    rule numeric_terminal 
      (number 1..1  <NumericTerminal>) / (numeric_field_name 1..1 <NumericTerminal>) / (datetime_field_name 1..1 <NumericTerminal>) /
      (derived_field_name 1..1  <NumericTerminal>) 
    end

    rule arithmetic_operator
      (space? '*' space? <ArithmeticOperator>) / (space? '/' space? <ArithmeticOperator>) / 
      (space? '+' space? <ArithmeticOperator>) / (space? '-' space? <ArithmeticOperator>)  
    end
    
    rule numeric_operator
      (space? 'ne'i space? <NumericOperator>) / (space? '!=' space? <NumericOperator>) / 
      (space? 'eq'i space? <NumericOperator>) / (space? '=' space? <NumericOperator>) / 
      (space? 'le'i space? <NumericOperator>) / (space? 'space? <=' space? <NumericOperator>) / 
      (space? 'ge'i space? <NumericOperator>) / (space? '>=' space? <NumericOperator>) /
      (space? 'lt'i space? <NumericOperator>) / (space? '<' space?  <NumericOperator>) / 
      (space? 'gt'i space? <NumericOperator>) / (space? '>' space? <NumericOperator>)
    end

    rule character_expression
      (character_terminal match_operator regexp <CharacterExpression>) /
      (character_terminal character_operator character_terminal <CharacterExpression>) 
    end

    rule character_terminal
      (character_field_name 1..1 <CharacterTerminal>) / (string 1..1 <CharacterTerminal>) 
    end

    rule match_operator
      (space? 'mt'i space? <MatchOperator> ) / (space? 'nm'i space? <MatchOperator> ) 
    end

    rule character_operator
      (space? 'ct'i space? <CharacterOperator> ) / 
      (space? 'nc'i space? <CharacterOperator> ) / 
      (space? '!='i space? <CharacterOperator> ) / 
      (space? '>='i space? <CharacterOperator> ) / 
      (space? '<='i space? <CharacterOperator> ) / 
      (space? '>'i space? <CharacterOperator> ) / 
      (space? '<'i space? <CharacterOperator> ) / 
      (space? '='i space? <CharacterOperator> ) / 
      (space? '+' space? <CharacterOperator> ) / 
      match_operator 1..1
    end
  end
end 

